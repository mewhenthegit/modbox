!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.modbox=t():e.modbox=t()}(self,(()=>(()=>{"use strict";var __webpack_modules__={473:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>LoaderMod});var _modapi__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(869);class LoaderMod extends _modapi__WEBPACK_IMPORTED_MODULE_0__.BL{constructor(){super(...arguments),this.name="JavaScript Loader",this.description="The default loader for modbox.",this.version="0.0.1",this.namespace="loader-js"}Load(data){try{let result=eval(`(function(){return ${data}})();`);return console.log(`(function(){return ${data}})();`),console.log(result),result}catch(e){return console.error(e),new _modapi__WEBPACK_IMPORTED_MODULE_0__.BL}}CanLoad(e){return e.endsWith(".js")}}},869:(e,t,o)=>{o.d(t,{BL:()=>d,j$:()=>c,Dg:()=>l});class r{constructor(){this._callbacks={}}on(e,t){this._callbacks[e]||(this._callbacks[e]=[]),this._callbacks[e].push(t)}off(e,t){this._callbacks[e]&&this._callbacks[e].forEach(((o,r)=>{o===t&&this._callbacks[e].splice(r,1)}))}once(e,t){this.on(e,((...o)=>{t(o),this.off(e,arguments.callee)}))}emit(e,...t){this._callbacks[e]&&this._callbacks[e].forEach((e=>e(...t)))}}class i{constructor(e,t,o){this.name=e,this.data=t,this.defaultaction=o,this.defaultPrevented=!1}preventDefault(){this.defaultPrevented=!0}run_default(...e){this.defaultPrevented||this.defaultaction(...e)}}var n,s;!function(e){e.deepClone=function e(t){let o=[];for(let r=0;r<t.length;r++){let i=t[r];"object"==typeof i&&(i=s.deepClone(i)),Array.isArray(i)&&(i=e(i)),o.push(i)}return o},e.remove=function(e,t){return t.splice(e,1)}}(n||(n={})),function(e){function t(e){for(let o in e){if("function"==typeof e[o])return!0;if("object"==typeof e[o])return t(e[o])}return!1}e.hasFunctions=t,e.deepClone=function e(o){if(window.structuredClone)return window.structuredClone(o);if(!t(o))return JSON.parse(JSON.stringify(o));let r={};for(let t in o)"object"!=typeof o[t]?Array.isArray(o[t])?r[t]=n.deepClone(o[t]):r[t]=o[t]:r[t]=e(o[t])}}(s||(s={}));let a=window;class d{init(){}constructor(){this.name="no name",this.description="no description",this.version="0.0.0",this.namespace="mod"}}class l extends d{constructor(){super(...arguments),this.name="ModAPI",this.description="An API for rmtrollbox mods",this.version="0.0.1",this.namespace="modapi",this.loaded=[],this.hooks={}}GetMod(e){let t=this.loaded.find((t=>t.namespace===e));if(!t)throw new Error(`Mod with namespace ${e} not found.`);return t}GetModByName(e){return this.loaded.find((t=>t.name===e))}GetMods(){return this.loaded}LoadMod(e){null==e&&$alert("Uh oh! Something went horribly wrong loading a mod!");let t=new e;this.loaded.find((e=>e.name===t.name))||(this.loaded.push(t),t.init())}ReplaceMod(e,t){let o=this.loaded.findIndex((t=>t.name===e.name));-1!==o&&(this.loaded[o]=t)}Hook(e){if(this.hooks[e])return this.hooks[e];let t=new r,o=a[e];return a[e]=async function(e,...o){let r=n.deepClone(o);t.emit("before_call",r);let s=new i("hooked_function_call",{funcargs:r},e);t.emit("call",s),await new Promise((e=>setTimeout(e,80))),s.run_default(...r),t.emit("after_call")}.bind(this,o),this.hooks[e]=t,t}FilterMods(e){return this.loaded.filter((t=>t.namespace.startsWith(e)))}}const c=new l}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](o,o.exports,__webpack_require__),o.exports}__webpack_require__.d=(e,t)=>{for(var o in t)__webpack_require__.o(t,o)&&!__webpack_require__.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__={};__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Mod:()=>modapi.BL,ModAPI:()=>modapi.j$,ModAPI_C:()=>modapi.Dg});var modapi=__webpack_require__(869);class MBLogger extends modapi.BL{constructor(){super(...arguments),this.name="MBLogger",this.description="The default logger for modbox.",this.version="0.0.1",this.namespace="mblogger"}init(){}CreateLogger(e){return new Logger(e)}}class Logger{constructor(e){this.name=e}getTime(){let e=new Date;return`${e.getHours().toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}:${e.getSeconds().toString().padStart(2,"0")}`}log(...e){console.log(`[${this.getTime()}] [${this.name}]`,...e)}info(...e){console.info(`[${this.getTime()}] [${this.name}] [INFO]`,...e)}warn(...e){console.warn(`[${this.getTime()}] [${this.name}] [WARN]`,...e)}error(...e){console.error(`[${this.getTime()}] [${this.name}] [ERROR]`,...e)}}class trollbox extends modapi.BL{constructor(){super(...arguments),this.name="trollbox",this.description="trollbox API",this.version="0.0.1",this.namespace="trollbox",this.logger=modapi.j$.GetMod("mblogger").CreateLogger("trollbox"),this.registeredCommands=[]}init(){this.logger.log("Initializing trollbox API"),modapi.j$.Hook("sendMsg").on("call",(e=>{let t=e.data.funcargs[0];if(t.startsWith("/")){let o=t.substr(1).split(" "),r=o.shift(),i="";r.includes(":")&&(i=r.split(":")[0],r=r.split(":")[1]);let n=this.registeredCommands.filter((e=>i?e.namespace===i&&(e.name===r||e.aliases.includes(r)):e.name==r||e.aliases.includes(r)));n.length>0&&(e.preventDefault(),n[0].execute(o))}})),this.logger.info("trollbox api initialized"),this.PrintMessage({nick:"modbox",color:"green",home:"balls",date:Date.now(),msg:"Modbox active!"})}PrintMessage(e){window.printMsg(e)}RegisterCommand(e){this.registeredCommands.push(e)}GetElement(e){return document.querySelector(`#trollbox > ${e.GetSelector()}`)}}class UIElement{constructor(e,t){this.name=e,this.element=t,this._children=[]}GetSelector(){return this.element}SetChildren(e){return this._children=e.map((e=>(e.element=`${this.element} > ${e.element}`,e))),this}Get(e){let t=this._children.find((t=>t.name===e));if(!t)throw new Error(`No child named ${e}`);return t}get children(){return Object.fromEntries(this._children.map((e=>[e.name,e])))}}const UI={Form:new UIElement("Form","#trollbox_form").SetChildren([new UIElement("Input","textarea#trollbox_input"),new UIElement("SendButton","button"),new UIElement("NickButton","button#trollbox_nick_btn"),new UIElement("UploadButton","button#trollbox_upload_btn")])};class ModStorage extends modapi.BL{constructor(){super(...arguments),this.name="ModStorage",this.description="A mod that stores mod data",this.version="0.0.1",this.namespace="storage"}init(){}GetStorage(e){return new StorageData(e)}}class StorageData{constructor(e){this.name=e}Get(e,t){$db.get(`modbox/${this.name}/${e}`,((e,o)=>{console.log(e,o),t(o)}))}Set(e,t){$db.set(`modbox/${this.name}/${e}`,t)}Remove(e){$db.del(`modbox/${this.name}/${e}`)}List(e){return $db.keys(((t,o)=>{let r=[];for(let e=0;e<o.length;e++)o[e].startsWith("modbox/"+this.name+"/")&&r.push(o[e].replace(`modbox/${this.name}/`,""));e(r)}))}Clear(){this.List((e=>{e.forEach((e=>{this.Remove(e)}))}))}}var loader_js=__webpack_require__(473);const ModBox={ModAPI:modapi.j$,Mod:modapi.BL};class ModLoader extends modapi.BL{constructor(){super(...arguments),this.name="Mod Loader",this.description="A mod that loads mods",this.version="0.0.1",this.namespace="modloader",this.logger=modapi.j$.GetMod("mblogger").CreateLogger("modloader")}init(){this.logger.info("Loading mods...");let e=modapi.j$.GetMod("storage").GetStorage("mods");e.List((t=>{this.logger.info(`Found ${t.length} mods`);for(let o=0;o<t.length;o++){let r=t[o];e.Get(r,(e=>{this.logger.info(`Loading ${r}`);let t=modapi.j$.FilterMods("loader-"),o=!1;for(let i of t)if(i.CanLoad(r)){this.logger.info(`Loading mod ${r} with loader ${i.name}`),modapi.j$.LoadMod(i.Load(e)),this.logger.info(`Loaded ${r}`),o=!0;break}o||this.logger.error(`Could not load mod ${r}: no loader found for it`)}))}})),this.logger.info(`${modapi.j$.GetMods().length} Mods loaded`)}}return window.modbox=ModBox,window.modbox.ModAPI.LoadMod(MBLogger),window.modbox.ModAPI.LoadMod(trollbox),window.modbox.ModAPI.LoadMod(ModStorage),window.modbox.ModAPI.LoadMod(loader_js.A),window.modbox.ModAPI.LoadMod(ModLoader),__webpack_exports__})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,